// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Partnerly.Models;

#nullable disable

namespace Partnerly.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905091412_createReuiredRecords")]
    partial class createReuiredRecords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Partnerly.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0869b53-fb1d-41f2-9ba9-dafdaade1381"),
                            Action = "UC",
                            CreatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            CreatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5488),
                            IsDeleted = false,
                            UpdatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            UpdatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5490),
                            UserId = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65")
                        });
                });

            modelBuilder.Entity("Partnerly.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Partnerly.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df80c70b-5b1d-43bb-b807-f8a37b83ccd9"),
                            CreatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            CreatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5309),
                            IsDeleted = false,
                            Name = "Administrator",
                            Type = "D",
                            UpdatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            UpdatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5310)
                        },
                        new
                        {
                            Id = new Guid("49ed5a66-83a2-4f42-a1db-e447e8a4b23f"),
                            CreatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            CreatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5316),
                            IsDeleted = false,
                            Name = "Employee",
                            Type = "U",
                            UpdatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            UpdatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5316)
                        },
                        new
                        {
                            Id = new Guid("dfd999ec-f0d3-4337-865f-66d5437356a2"),
                            CreatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            CreatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5318),
                            IsDeleted = false,
                            Name = "User",
                            Type = "V",
                            UpdatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            UpdatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(5318)
                        });
                });

            modelBuilder.Entity("Partnerly.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Partnerly.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferrerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReferrerId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            Balance = 0m,
                            CreatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            CreatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(4868),
                            Email = "marat.iigservices@gmail.com",
                            FirstName = "Marat",
                            IsDeleted = false,
                            LastName = "Danielyan",
                            PasswordHash = "$2a$11$7qHZAmH9jYIufxpUFCHvqOZfJh6Bmbl/tkggdJUYq/3dBIPh02Bcm",
                            Phone = "+37497111312",
                            RoleId = new Guid("df80c70b-5b1d-43bb-b807-f8a37b83ccd9"),
                            UpdatedBy = new Guid("b8b2fe83-92ac-4214-ad53-606690348a65"),
                            UpdatedDate = new DateTime(2025, 9, 5, 9, 14, 12, 112, DateTimeKind.Utc).AddTicks(4872)
                        });
                });

            modelBuilder.Entity("Partnerly.Models.Log", b =>
                {
                    b.HasOne("Partnerly.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Partnerly.Models.Payment", b =>
                {
                    b.HasOne("Partnerly.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Partnerly.Models.Transaction", b =>
                {
                    b.HasOne("Partnerly.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Partnerly.Models.User", b =>
                {
                    b.HasOne("Partnerly.Models.User", "Referrer")
                        .WithMany("Referrals")
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Partnerly.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referrer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Partnerly.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Partnerly.Models.User", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Payments");

                    b.Navigation("Referrals");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
