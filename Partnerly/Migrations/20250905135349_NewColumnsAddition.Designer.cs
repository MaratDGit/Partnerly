// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Partnerly.Models;

#nullable disable

namespace Partnerly.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905135349_NewColumnsAddition")]
    partial class NewColumnsAddition
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Partnerly.Models.Log", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LogCreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LogCreatorId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2da1928c-0e1e-4f27-becf-b9dbac18e256"),
                            Action = "UC",
                            CreatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            CreatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(3164),
                            CreatorUserId = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            IsDeleted = false,
                            LogMessage = "Created the Admin user from OnModelCreating",
                            Type = "I",
                            UpdatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            UpdatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(3165)
                        });
                });

            modelBuilder.Entity("Partnerly.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Partnerly.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe366bdb-6092-4bcc-b604-8032eca2bdd9"),
                            CreatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            CreatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(2992),
                            IsDeleted = false,
                            Name = "Administrator",
                            Type = "D",
                            UpdatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            UpdatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(2993)
                        },
                        new
                        {
                            Id = new Guid("b450483f-413f-43fe-b5c4-9131bf511860"),
                            CreatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            CreatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(2997),
                            IsDeleted = false,
                            Name = "Employee",
                            Type = "U",
                            UpdatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            UpdatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(2998)
                        },
                        new
                        {
                            Id = new Guid("af849193-6e77-4cf7-a853-046499493679"),
                            CreatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            CreatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(3000),
                            IsDeleted = false,
                            Name = "User",
                            Type = "V",
                            UpdatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            UpdatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(3000)
                        });
                });

            modelBuilder.Entity("Partnerly.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Partnerly.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlayn")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSignInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferrerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReferrerId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            Balance = 0m,
                            CreatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            CreatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(2723),
                            Email = "marat.iigservices@gmail.com",
                            FirstName = "Marat",
                            IsDeleted = false,
                            LastName = "Danielyan",
                            PasswordHash = "$2a$11$3pm39sNx0jJoAJFe4WK4uuvF80Rt5ybHWJ30EBpq2NAea1z5ymQHK",
                            Phone = "+37497111312",
                            RoleId = new Guid("fe366bdb-6092-4bcc-b604-8032eca2bdd9"),
                            UpdatedBy = new Guid("fe004104-dea8-48fb-a6f5-3ce0fc1b578b"),
                            UpdatedDate = new DateTime(2025, 9, 5, 13, 53, 49, 282, DateTimeKind.Utc).AddTicks(2732)
                        });
                });

            modelBuilder.Entity("Partnerly.Models.Log", b =>
                {
                    b.HasOne("Partnerly.Models.User", "LogCreator")
                        .WithMany("Logs")
                        .HasForeignKey("LogCreatorId");

                    b.Navigation("LogCreator");
                });

            modelBuilder.Entity("Partnerly.Models.Payment", b =>
                {
                    b.HasOne("Partnerly.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Partnerly.Models.Transaction", b =>
                {
                    b.HasOne("Partnerly.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Partnerly.Models.User", b =>
                {
                    b.HasOne("Partnerly.Models.User", "Referrer")
                        .WithMany("Referrals")
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Partnerly.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referrer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Partnerly.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Partnerly.Models.User", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Payments");

                    b.Navigation("Referrals");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
